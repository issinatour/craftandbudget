* Implementación de la bases de datos
  Se ha tratado de implementar una base de datos los más completa y
  escalable posible. Como se puede apreciar en el modelo, se ha dado
  la funcionalidad a la app de que se puedan dar de alta varios
  usuarios a la vez en una misma tienda. Para ello se ha creado una
  tabla "craftshop_users" en la que se relacionan un usuario de la
  tabla "user", con un rol de usuario de la tabla "user_rol" y con una
  tienda. De está manera, además de que puedan haber varios usuarios
  en una tienda, se les pueden asignar roles. Siendo el de
  administrador el más importante, ya que este será el que tenga los
  máximos privilegios. {{diferencia entre roles de usuarios}}

  En cuanto a la tienda al que se conecta, como se puede apreciar en
  la tabla "shop" se necesita almacenar el api key de la web a la que
  pertence. Esta api key, permite privilegios CRUD en la base de datos
  original usando la web api de prestsashop o de la tienda en
  cuestión. En nuestra base de datos hay dos tipos de tiendas, las
  tiendas virtuales que tienen los ususario online, y la tienda
  craftshop. Un usuario puede tener varias tiendas online, pero solo
  puede tener una tienda craftshop. Se consigue así que los artesanos
  puedan utilizar craft&shop para sincronizar todas sus tiendas
  online, y saber cuantos y que productos tienen online en cada
  tienda. Para que cuando los usuarios sepan rápidamente de que tienda
  es cada producto, se ha decidido no solo especificar una columna
  para el nombre de la tienda virtual, sino que también se ha creado
  una columna para almacenar el logo de la tienda. Así, cuando el
  usuario este visualizando todos los productos que tiene a la venta,
  podrá saber a que tienda pertence cada uno solo con ver la imágen.

  Se ha decidido también implementar una página multilenguaje para así
  tener más usuarios potenciales. Para ello, se ha creado una tabla
  "lang" en donde se especifica cada lenguaje que aceptará craft&shop
  {{lista total o parcial}}. Se relacionará cada usuario con un o
  varios lenguajes. Para saber que lenguajes tiene disponible un
  usuario, se usará la web api de prestashop, ya que en su base de
  datos se almacena los lenguajes que tiene el usuario. La parte la
  página web que será multilenguaje será la referente a los
  productos. La idea de implantar está funcionalidad es que muchos
  artesanos traducen sus productos al inglés o a otro idioma para
  conseguir más clientes. Desde prestashop no es posible averiguar
  cuál es su lenguaje principal, así que se optó por descargar todos
  sus productos en todos los lenguajes que tenga especificado, y que
  sea el propio usuario quien eliga su lenguaje a través de una
  pantalla de configuración. Se ha considerado que las únicas partes
  multilenguaje de nuestra aplicacón sea los productos, y los datos
  estáticos de la página, es decir, los menús y mensajes de
  información. Los materiales, y proveedores solo se almacenarán en la
  base de datos en un solo lenguaje, ya que nuestra app será un back
  office para los artesanos, no un producto final para la vista de los
  clientes. Tiene más sentido que la información insertada por el
  usuario se almacena tan solo en un lenguaje, el lenguaje principal
  del usuario. La tabla que se encargará de almacenar los diferentes
  lenguajes de cada producto sera la tabla "product_language". Esta
  tabla es la relación n-n entre la tabla "product" y  la tabla "lang".

  Los materiales se almacenan en la tabla "materiales". Como se ha
  dicho anteriormente, los materiales son los materias necesarias para
  porder fabricar los productos de los artesanos. Estos materiales
  tendrá que ser introducidos por los artesanos, ya que no existen en
  las tiendas virtuales. Para que los artesanos puedan tener más
  organizado el stock de materiales, se ha optado por relacionar a
  cada material con una categoría. Así, los usuarios podrán saber
  todos los materiales disponibles de una categoría dada, y podrán
  buscar de manera eficiente el stock de materiales. Como nuestro
  sistema va a ser multiusuario para una misma tienda, se ha optado
  por relacionar cada material no con un usuario, pero con la tienda
  craft&budget que comparten todos los usuarios de una misma
  tienda. 

  Estos materiales no solo tiene la funcionalidad de especificar
  cuantos materiales tiene un usuario, sino que también sirven para
  saber cuantos materiales son necesarios para fabricar un producto.
  La tabla materiales representa los datos de los materiales, no el
  stock, por ello se ha decidido crear en la tabla "materiales" un
  dato "id_mesaurement", el cual hace referencia a la tabla
  "measurement". En esta tabla lo que se almacena son el tipo de
  medidas de los materiales, es decir si están especificados en kg, g,
  l, metros cuadrados, etc...  Para tener costancia de la cantidad de
  cada material, se ha creado la tabla "stock_material". 

  En cuanto a los proveedores, estos es almacenan en la tabla
  "supplier". De estos se almacenará la dirección, y el nombre. Además
  para saber que materiales tiene que proveedor, se ha creado la tabla
  "material_supplier". Es una relación n-n, en donde un material puede
  ser comprado por varios proveedores. Lo hemos creído conveniente
  hacerlo así, para dar la oportunidad a los artesanos a poder tener
  en su base de datos varios proveedores para un mismo material, por
  si en algún futuro alguno de sus proveedore falla.

  En cuanto a los productos, estos se cogerían directamente de la
  tienda online del artesano. Se almacenan en la tabla
  "product". Además se creyó conveniente crear tipos para los
  productos. Así, igual que con los materiales, se puede tener mejor
  organizado los datos. De está manera, por ejemplo, si el artesano
  vende muebles; podría saber todos los productos que tienen de un
  tipo, como el tipo mesa, o el tipo silla. Como un producto puede
  tener varios tipo y un tipo puede ser de varios productos, se creó
  una realación n-n entre la tabla "product"y la tabla de tipo
  "types". Además también se almacena una imagen de cada
  material. Está imagen se coge también la tienda online a través de
  la web appi. Se ha optado por no guardar la imágen en formato
  binario en la base de datos, sino guardar el nombre de la imagen
  desde la ruta relativa, en nuestro sistema de ficheros todas las
  imágenes se guardarán en la carpeta assets/images. De está manera,
  es mucho más fácil guardar imágenes, pues tan solo hay que llamar a
  la libreria FileUpload de codeigniter, y este se encargá de
  guardarlos en el sistema de ficheros, tan solo habría que almacenar
  el string del nombre de la imagen.



  
