* resumen
  Craft&budget es una web app destinada para que aquellos artesanos que tengan una 
  tienda online en el CMS prestashop puedan manejar el stock de su tienda. Podrán 
  tanto manejar el stock de los productos que tengan en venta, como el stock de los 
  materiales que usan para crear sus productos. Con craft and budget podrán además 
  gestionar la creación de sus productos sabiendo cuantos materiales necesitan para 
  crear sus productos y cuántos productos pueden crear con los materiales de los 
  que disponen. Finalmente también dispondrán de una libreta de dirección para 
  almacenar todos sus proveedores.
  
  El stock de los materiales no se encuentra en la base de datos de prestashop, 
  sino que los artesanos tendrán que crearlo con los materiales de que dispongan 
  materiales.
  
  La primera versión se conectará con prestashop únicamente, pero en un futuro 
  podrá conectarse con otras tiendas online. Para conectarse, craft and budget se 
  comunica con prestashop mediante una api rest por la cual se descargá todos los 
  productos que el artesano tiene en la tienda. Usaremos una base de datos mysql 
  para guardar todos los productos y los materiales.

* abstract
  Craft and budget is a web app destined to the artisans that they
  have an online shop in the CMS prestashop. With craft and budget
  they can manage the stock of the products that they have for sale,
  and the stock of the materials that they use to build those
  products. With craft and budget they also can manage the creation of
  their products by knowing how much material is needed to build a
  product. They also can know how many products they can build with
  the materials they have in their warehouse. Finally, they will also
  have the addresses of the supplier of each material.

  The stock of materials it is not on the data base of prestashop, the
  user will have to create them with the materials that they have.

  The first version of our web app, it will be syncronyzed with
  prestashop only. For that connection, craft and budget will be use
  a RESTful api. With that api, the web app will download all the
  products that the artisan have in prestashop. For saving all the
  products, materials and suppliers we will use a mysql database.


* Codeigniter librería SimpleLoginSecure
  Para la realización del login se ha recurrido a una librería libre
  de codeigniter para php hecha por Stéphane Bourzeix. Se ha
  conseguido a través de esta URL
  "http://github.com/DaBourz/SimpleLoginSecure". Según palabras de los
  propio autores, "esta librería esta diseñada para ofrecer de una
  manera rápida y simple, una librería de login que te permita poner
  en marcha un sistema no intrusivo de autorizaciones. No trata de
  adivinar como quieres estructura tu app, sino que simplemente
  intenta ofrer ayuda".
  
  Es una librería muy sencilla, la cual es muy fácil ponerla en
  marcha. Tan solo tienes que enlazarla con tu modelo para realizar
  una consulta a tu base de datos donde guardes la información de tus
  usuarios. Una vez se le llame a la función login con parámetros
  "user"y "password", la librería ejecturá un select en la tablas
  antes seleccionada buscando coincidencias con "user". Si la select
  devuelve más de una fila, el passowrd que recibió como parámetro la
  función login se encripta con el algoritmo MD5. Más tarde se
  verifica con la columna password en la base de datos (esta se
  encuentra ya encriptada en MD5). Si existe coincidencia, se pasa a
  almacenar en caché los datos de la sesión que el programador
  considere oportuno y se devuelve el valor true.

  Cabe destacar que el algoritmo MD5 no es seguro para almacenar
  información confidencial, ya que es posible descifrarla muy
  fácilmente. Es más recomendable usar algoritmos de cifrados más
  robustos como bcrypt, scrypt o sha-512.

  
  
* Implementación de la bases de datos
** Introducción a nuestra base de datos
  Se ha tratado de implementar una base de datos los más completa y
  escalable posible. 
** Tiendas
   La aplicación va a ser multitienda. Un artesano puede usar a la
   misma vez y de forma sincronizada diferentes tiendas online en
   craft&budget. Para ello, se ha creado la tabla "craftshop" en la
   que se detallan los datos genéricos que el usuario quiere para
   todas sus tiendas online. Cada tienda virtual se importará en la
   tabla "shop". En ella se detalla información de esa tienda en
   concreto, como el nombre de ésta, o el logo de la tienda. Para
   conseguir que en una misma aplicación craft&budget haya varias
   tiendas se crea la tabla de relacion n-n "shop_craftshop". En
   cuanto a la tienda al que se conecta, como se puede apreciar en la
   tabla "shop" se necesita almacenar el api key de la web a la que
   pertence. Esta api key, permite privilegios CRUD en la base de
   datos original usando la web api de prestsashop o de la tienda en
   cuestión.

Se consigue así que los artesanos puedan utilizar craft&shop para
  sincronizar todas sus tiendas online, y saber cuantos y que
  productos tienen online en cada tienda. Para esta situación cuando
  los usuarios sepan rápidamente de que tienda es cada producto, se ha
  decidido no solo especificar una columna para el nombre de la tienda
  virtual, sino que también se ha creado una columna para almacenar el
  logo de la tienda. Así, cuando el usuario este visualizando todos
  los productos que tiene a la venta, podrá saber a que tienda
  pertence cada uno solo con ver la imagen. 

  Para relacionar cada producto del artesano con la tienda a la que
  pertenece, se usan la tabla "types". Evitando así la duplicación de
  datos del nombre de la tienda y del logo de esta. Como se puede ver
  en la diagrama de la base de datos, la tabla "shop" hace referencia
  al id de la tabla "types".



** Manejo de usuarios
  Como se puede apreciar en el modelo, se ha dado la funcionalidad a
  la app de que se puedan dar de alta varios usuarios a la vez en una
  misma aplicación craft&budget. La información básica de los usuarios
  se encuentra en la tabla "user". Así mismo, los usuarios pueden tener
  o un rol de administrador, o un rol de usuario normal. Los usuarios
  con rol de administrador son los únicos usuarios que pueden importar
  e exportar datos hacia las tiendas online. Los tipos de roles están
  especificados en la talba "user_rol". Finalmente, se ha creado una
  tabla "craftshop_users" en la que se relacionan un usuario de la
  tabla "user", con un rol de usuario de la tabla "user_rol" y con una
  tienda de la tabla "shop".

** Multilenguaje
  Se ha decidido también implementar una página multilenguaje para así
  tener más usuarios potenciales. Para ello, se ha creado una tabla
  "lang" en donde se especifica cada lenguaje que aceptará
  craft&shop. En esta tabla se insertarán todos los valores estándar
  iso 639-2 de todos los lenguajes disponibles. Estos lenguajes están
  escritos en tres columnas, una para el nombre del lenguaje, otra
  para código numérico del lenguaje, y la última para el código
  alfabético. Se relacionará cada usuario con un o varios
  lenguajes. Para saber que lenguajes tiene disponible un usuario, se
  usará la web api de prestashop, ya que en su base de datos se
  almacena los lenguajes que tiene el usuario. La idea de implantar
  está funcionalidad es que muchos artesanos traducen sus productos al
  inglés o a otro idioma para conseguir más clientes. Desde prestashop
  no es posible averiguar cuál es su lenguaje principal, así que se
  optó por descargar todos sus productos en todos los lenguajes que
  tenga especificado, y que sea el propio usuario quien eliga su
  lenguaje a través de una pantalla de configuración. Se ha
  considerado que las mejores partes en las incorporar multilenguaje
  de nuestra aplicacón sea los productos, y los datos estáticos de la
  página, es decir, los menús y mensajes de información. Los
  materiales, y proveedores solo se almacenarán en la base de datos en
  un solo lenguaje, debido a que nuestra app será un back office para los
  artesanos, no un producto final para la vista de los clientes. Tiene
  más sentido que la información insertada por el usuario se almacena
  tan solo en un lenguaje, el lenguaje principal del usuario. La tabla
  que se encargará de almacenar los diferentes lenguajes de cada
  producto sera la tabla "product_language". Esta tabla es la relación
  n-n entre la tabla "product" y la tabla "lang". Un producto puede
  estar traducido a muchos lenguajes, y un lenguaje puede estar siendo
  usado en muchos productos. 


** Materiales
  Los materiales se almacenarán en una tabla "materiales". Como se ha
  dicho anteriormente, los materiales son los materias necesarias para
  poder fabricar los productos de los artesanos. Estos materiales
  tendrá que ser introducidos por los artesanos, ya que no existen en
  las tiendas virtuales. Como nuestro sistema va a ser multiusuario
  para una misma tienda craft&budget, se ha optado por relacionar cada
  material no con un usuario, pero con la tienda craft&budget que
  comparten todos los usuarios de una misma tienda. Para que los
  artesanos puedan tener más organizado el stock de materiales, se ha
  optado por relacionar a cada material con una categoría. La columna
  "id_category" de la tabla "material" hace referencia a la tabla
  donde se guardan todas las categorías de la base de datos, en la
  tabla "category". De esta manera, los usuarios podrán saber todos los
  materiales disponibles de una categoría dada, y podrán buscar de
  manera eficiente el stock de materiales. Esta última información se
  encuentra en la tabla "stock_material".

  Los materiales no solo tiene la funcionalidad de especificar cuantos
  materiales tiene un usuario, sino que también sirven para saber
  cuantos materiales son necesarios para fabricar un producto.  La
  tabla materiales representa los datos de los materiales, no el stock
  que hay de dicho materia. Para hacer ello se ha decidido crear en la tabla
  "materiales" un dato "id_measurement", el cual hace referencia a la
  tabla "measurement". En esta tabla lo que se almacena es el tipo de
  medidas de los materiales, es decir si están especificados en kg, g,
  l, metros cuadrados, etc...  Para tener costancia de la cantidad de
  cada material, se ha creado la tabla "stock_material".

** Proveedores
  En cuanto a los proveedores, estos es almacenan en la tabla
  "supplier". De estos se almacenará la dirección, y el nombre. Además
  para saber que materiales tiene que proveedor, se ha creado la tabla
  "material_supplier". Es una relación n-n, en donde un material puede
  ser comprado por varios proveedores. Lo hemos creído conveniente
  hacerlo así, para dar la oportunidad a los artesanos a poder tener
  en su base de datos varios proveedores para un mismo material, por
  si en algún futuro alguno de sus proveedore falla.

** Productos 
  En cuanto a los productos, estos se cogen directamente de la
 tienda online del artesano. Se almacenarán en la tabla "product". Se
  ha decidido que cada producto solo puede ser de una tienda online. A
  pesar de que en la realidad se pueda tener un mismo producto
  publicitado en varias tienda, hemos considerado más adecuado que si
  son de tiendas separadas, el producto en nuestra bases de datos es
  diferente. Ya que podría darse el case de que el artesano quisiera
  diferentes precios dependiendo de la tienda.

  Además también se almacena una imagen de cada material. En realidad,
  según nuestra base de datos se podría almacenar más de una imagen,
  pero ya que la imagen solo tiene sirve para facilitar la lectura de
  productos desde las tablas, no para mostrar la mercancía a clientes,
  se ha decidido que lo más conveniente es tan solo cargar la imagen
  principal del producto desde prestashop. Se ha optado por no guardar
  la imágen en formato binario en la base de datos, sino guardar el
  nombre de la imagen desde la ruta relativa en nuestro sistema de
  ficheros. Estas rutas se almacenarán en la tabla "product_media" y 
  todas las imágenes se guardarán en la carpeta assets/images. De está
  manera, es mucho más fácil guardar imágenes, pues tan solo hay que
  llamar a la libreria FileUpload de codeigniter, y este se encargá de
  guardarlos en el sistema de ficheros, tan solo habría que almacenar
  el string del nombre de la imagen.

  Como es una aplicación destinada vendedores de artesanía, y los
  productos que venden suelen estar hechos a medida, o al menos están
  en varios colores, tamaños, materiales, etc... Se ha implementado la
  base de datos de manera que se pueda permitir a los artesanos poder
  almacernar sus materiales y productos de forma dinámica. Para ellos,
  se ha creado la tabla "combination", la que sirve como referencia
  para determinar una variedad de un determinado producto. Por
  ejemplo, si una mesa es XXL, si está pintada de color azul,
  etc.. Esta combinación tendrá un stock y un precio. Para almacenar
  en la base de datos las características de dicha combinación, hemos
  creado otra tabla, la tabla "attributes". Finalmente, para
  relacionar una combinación de un producto con un atributo
  determinado, se ha creado la tabla "combination_attribute".

  Cabe destacar, que los materiales se relacionan con los productos,
  no a través de la tablas "productos" y "materiales", sino a través
  de la tabla "combinación", "materiales". Esto es así, porque
  dependiendo de los atributos de un producto, este necesitará un tipo
  de material u otro. Si tienes una mesa, y esta tiene el atributo
  rojo; interesa relacionar el atributo "pintura roja para mesas" a la
  combinación, y no al producto mesa.
  
   
* Apartado 3. Conclusiones
  En la realización de esta práctica nos hemos dado cuenta de la
  importancia que tienen las apis a la hora de crear tus propias
  aplicaciones. No solo de las api de tiendas online, sino también de
  apis que te ayudan a que tus servicios web sean más completos, por
  ejemplo, que se cargue por defecto una imagen cuando te das de alta
  con un correo eléctronico mediante gravatar. A través de estas apis, los
  programadores tienen la posibilidad de crear nuevos servicios web
  juntando partes de apis. 
  
  También resulta interesante conocer las diferentes metodologías a la
  hora de abordar la creación aplicaciones para dispositivos
  móviles mediante tecnologías de programación web. Cada vez está
  siendo más usado tecnologías sustituvas de las nativas para crear
  aplicaciones móviles como phonegap/cordoba.
  
  Uno de los apartados en los que más hemos encontrado problemas ha
  sido a la hora de la planificación y de la gestión del tiempo. A
  menudo, tareas que en principio parecían  sencillas de implementar se
  convertian en tareas díficiles de llevar a cabo que se demoraban en
  el tiempo. También, en la propia viabilidad del proyecto. Han habido
  funcionalidades que nos parecieron implementables pero que después
  de pensarlas mejor nos dábamos cuenta de que eran tremendamente
  difíciles de llevarlas a cabo. 

** Apartado 3.2 Trabajo futuro
   Para un futuro, pensamos que craft and budget debería de tomar un
   camino en el cual ésta se integrase con la mayoría de las tienda
   online del mercado. No solo tiendas online personales creadas a
   partir de un CRM como, lo que hemos hecho con prestashop o otras
   como magento. Sino también integrarlas con tiendas online de
   terceros como ebay, u otras destinadas a artesanos en concreto como
   dwanda.
   
   También consideramos, que a parte de que nuestra página web sea
   multidispositivo mediante el framework twitter bootstrap, sería un
   plus el conseguir convertirla en una web app. De está manera
   podríamos ponerla a la venta en las tiendas de aplicaciones play
   store o apple store. Además, de está manera podríamos dar una mejor 
   experiencia de usuario a los clientes, ya que estos no tendría que
   abrir el navegador web para usar craft and budget, sino que podrían
   abrilo como una aplicación más de su dispositivo móvil.
   
